{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/source-control-dotenv-files","result":{"data":{"markdownRemark":{"html":"<p>I followed <a href=\"https://www.electricmonk.nl/log/2015/06/22/keep-your-home-dir-in-git-with-a-detached-working-directory/\">this</a> blog post to add my dotfiles from $HOME to git. </p>\n<p>That tutorial creates an alias for a custom git command to use for that directory, called dgit in their case. I found it ever so slighly annoying that I couldn't just do <code>git status</code> etc in my $HOME directory, and had to remember another alias for it. </p>\n<p>So to fix it, I wrote a wrapper function around the git command to either run the special detached Head command when in $HOME, and regular git anywhere else.</p>\n<pre><code>alias dotfiles='git --git-dir ~/repos/dotenv/.git --work-tree=$HOME'\n\ngitOverride() {\n\n        # In home directory, call custom detached head git command\n        if [ $PWD = $HOME ]; then\n                echo \"Running dotfiles git command..\"\n                command git --git-dir ~/repos/dotenv/.git --work-tree=$HOME \"$@\"\n        else\n                echo \"running regular git command\";\n                command git \"$@\"\n        fi\n}\n\nalias git=gitOverride;\n</code></pre>\n<p>And that's it! Works great, and saves just a <em>little</em> bit of brain space.</p>\n<p>Quick paraphrasing of the rest of the process for posterity: </p>\n<ul>\n<li>Create your git directory (where .git will be), somewhere other than $HOME. E.g. $HOME/repos/dotenv</li>\n<li>Add a .gitignore file that ignores everything</li>\n<li>Add the above alias to your .bash_aliases or wherever you keep them </li>\n<li>If you want to add files in $HOME to source control, add them with <code>git add -f [filename]</code> </li>\n</ul>","frontmatter":{"date":null,"slug":"/blog/source-control-dotenv-files","title":"Using Source Control for Bash Profile Files"}}},"pageContext":{"slug":"/blog/source-control-dotenv-files"}},"staticQueryHashes":[]}